---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC Infrastructure'

Parameters:
  VpcCidrBlock:
    Type: 'String'
    Description: 'The CIDR block for the VPC'

  ServerName:
    Type: 'String'
    Description: 'Name of the Minecraft server'
    Default: 'minecraft-server'

  MinecraftPort:
    Type: 'Number'
    Description: 'Minecraft server port'
    Default: 25565
    MinValue: 1024
    MaxValue: 65535

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: !Sub 'vpc-${AWS::Region}'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidrBlock, 2, 26]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub 'public-subnet-1-${AWS::Region}'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidrBlock, 2, 26]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub 'public-subnet-2-${AWS::Region}'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidrBlock, 2, 26]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub 'private-subnet-1-${AWS::Region}'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidrBlock, 2, 26]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub 'private-subnet-2-${AWS::Region}'

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ServerName}-igw'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ServerName}-nat'


  # Route Tables
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ServerName}-public-rt'

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ServerName}-private-rt'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub 'public-nacl-${AWS::Region}'

  PrivateNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: !Sub 'private-nacl-${AWS::Region}'

  # Public NACL Rules
  PublicNACLInboundHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  PublicNACLOutboundHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  PublicNACLInboundMinecraft:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 200
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: !Ref 'MinecraftPort'
        To: !Ref 'MinecraftPort'

  PublicNACLOutboundMinecraft:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 200
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: !Ref 'MinecraftPort'
        To: !Ref 'MinecraftPort'

  # Private NACL Rules
  PrivateNACLInboundHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  PrivateNACLOutboundHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # EFS NACL Rules for Private Subnet
  PrivateNACLInboundEFS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 300
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 2049
        To: 2049

  PrivateNACLOutboundEFS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 300
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 2049
        To: 2049

  # Add Mount Helper TCP Rules
  PrivateNACLInboundEFSMountHelper:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 301
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 988
        To: 988

  PrivateNACLOutboundEFSMountHelper:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 301
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 988
        To: 988

  # Add Mount Helper UDP Rules
  PrivateNACLInboundEFSMountHelperUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 302
      Protocol: 17  # UDP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 988
        To: 988

  PrivateNACLOutboundEFSMountHelperUDP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 302
      Protocol: 17  # UDP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 988
        To: 988

  # AWS Time Sync Service NACL Rules - Only port 123 needed
  PrivateNACLInboundTimeSync:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 303
      Protocol: 17  # UDP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '169.254.169.123/32'
      PortRange:
        From: 123
        To: 123

  PrivateNACLOutboundTimeSync:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 303
      Protocol: 17  # UDP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '169.254.169.123/32'
      PortRange:
        From: 123
        To: 123

  # EFS Response Ports
  PrivateNACLInboundEFSResponse:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 310
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLOutboundEFSResponse:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 310
      Protocol: 6  # TCP
      RuleAction: 'allow'
      Egress: true
      CidrBlock: !Ref VpcCidrBlock
      PortRange:
        From: 1024
        To: 65535

  # Don't forget to associate the NACLs with their respective subnets
  PublicSubnet1NACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNACL

  PublicSubnet2NACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNACL

  PrivateSubnet1NACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNACL

  PrivateSubnet2NACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNACL

  FlowLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'vpc-flow-logs.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'FlowLogsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vpc/flowlogs/*'

  FlowLogsKey:
    Type: 'AWS::KMS::Key'
    DeletionPolicy: 'Delete'
    UpdateReplacePolicy: 'Delete'
    Properties:
      Description: 'KMS key for encrypting flow logs'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: 'Allow'
            Principal:
              Service: 'logs.amazonaws.com'
            Action:
              - 'kms:Encrypt*'
              - 'kms:Decrypt*'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
            Resource: '*'
            Condition:
              ArnLike:
                'kms:EncryptionContext:aws:logs:arn': !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
      KeyUsage: 'ENCRYPT_DECRYPT'
      EnableKeyRotation: true

  FlowLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    DeletionPolicy: 'Delete'
    UpdateReplacePolicy: 'Retain'
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${AWS::StackName}'
      RetentionInDays: '30'
      KmsKeyId: !GetAtt 'FlowLogsKey.Arn'

  VPCFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogGroupName: !Ref FlowLogsGroup
      ResourceId: !Ref VPC
      ResourceType: 'VPC'
      TrafficType: 'ALL'

  SSMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for SSM endpoints'
      VpcId: !Ref VPC

  # VPC Endpoints for SSM
  SSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMSecurityGroup
      PrivateDnsEnabled: true

  SSMMessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMSecurityGroup
      PrivateDnsEnabled: true

  EC2MessagesEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMSecurityGroup
      PrivateDnsEnabled: true

  # S3 Gateway Endpoint
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

Outputs:
  VpcIdExport:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${ServerName}-vpc-id'

  PublicSubnetsExport:
    Description: 'Public Subnet IDs'
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Export:
      Name: !Sub '${ServerName}-public-subnets'

  PrivateSubnetsExport:
    Description: 'Private Subnet IDs'
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ServerName}-private-subnets'

  SSMSecurityGroupExport:
    Description: 'SSM Security Group'
    Value: !Ref SSMSecurityGroup
    Export:
      Name: !Sub '${ServerName}-ssm-security-group'
